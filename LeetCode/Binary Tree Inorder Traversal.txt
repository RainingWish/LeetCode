/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        //create answer list and a stack
        List<Integer> ans = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        //set current is root
        TreeNode curr = root;
        
        while(curr!=null||!stack.isEmpty()){
            //if curr.left not null keep push it into stack
            while (curr!=null){
                stack.push(curr);
                curr = curr.left;
            }
            //when curr rich null, pop curr from stack and save into ans
            curr = stack.pop();
            ans.add(curr.val);
            //then check curr.right value is null or not
            //if not null will be pop into ans
            curr = curr.right;
        }
        
        return ans;
    }
}