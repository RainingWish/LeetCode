/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    //int max = int.min;
    //recursion to find all possible sum
    //possible sum: left child | right child not null
    //compare curr sum and max
    
    int sum = Integer.MIN_VALUE;
    
    private int findMax(TreeNode root){
        if (root == null) return 0;
        
        int left = Math.max(findMax(root.left),0);
        int right = Math.max(findMax(root.right),0);
        
        sum = Math.max(sum, root.val + left + right);
        
        return root.val + Math.max(left,right);
    }
    
    public int maxPathSum(TreeNode root) {
        
        findMax(root);
        return sum;
    }
}