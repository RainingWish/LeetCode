/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        //recursion
        //null check
        if (preorder.length == 0) return null;
        return buildTree(preorder, inorder, 0, 0, inorder.length - 1);
    }
    
        
    private TreeNode buildTree(int[] preorder, int[] inorder, int preorderIndex, int start, int end) {
        //check inorder length
        if (start > end) return null;
        //create new node
        TreeNode node = new TreeNode(preorder[preorderIndex]);
        //find inorder index
        int inorderIndex = findInorderIndex(inorder, start, end, preorder[preorderIndex]);
        //create left node and right node
        int leftTreeSize = inorderIndex - start;
        int rightTreeSize = end - inorderIndex;
        //recursion to build the child node
        node.left = buildTree(preorder, inorder, preorderIndex + 1, start, inorderIndex - 1);
        node.right = buildTree(preorder, inorder, preorderIndex + leftTreeSize + 1, inorderIndex + 1, end);
        //return final answer
        return node;
    }
    
    private int findInorderIndex(int[] inorder, int start, int end, int key) {
        //find inorder index with preorder int
        for (int i = start; i <= end; i++) {
            if (inorder[i] == key) return i;
        }
        return -1;
    }
    
}