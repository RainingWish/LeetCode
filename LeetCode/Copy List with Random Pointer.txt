/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    public Node copyRandomList(Node head) {
        // old to new node mapping
        Map<Node,Node> oldToNew = new HashMap<>();
        Node newNode;
        Node oldNode = head;
        
        // for every node, create a copy and create a mapping between old and new node
        while(oldNode != null) {
            newNode = new Node(oldNode.val);
            oldToNew.put(oldNode, newNode);
            oldNode = oldNode.next;            
        }
        
        // copy next
        for(Node n : oldToNew.keySet()) {
            oldToNew.get(n).next = oldToNew.get(n.next);
        }
        // copy random
        for(Node n : oldToNew.keySet()) {
            oldToNew.get(n).random = oldToNew.get(n.random);
        }
        return oldToNew.get(head);
    }
}