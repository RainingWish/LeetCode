class Solution {
    //build BST
    class Node {
        Node left, right;
        int val, sum, dup = 1;
        public Node(int v, int s) {
            val = v;
            sum = s;
        }
    }
    
    public List<Integer> countSmaller(int[] nums) {
        Integer[] ans = new Integer[nums.length];
        Node root = null;
        //back to front
        for (int i = nums.length - 1; i >= 0; i--){
            root = buildTree(nums[i],root,ans,i,0);
        }
        return Arrays.asList(ans);
    }
    
    private Node buildTree(int num, Node node, Integer[] ans, int i, int sum){
        if(node == null){
            node = new Node(num , 0);
            ans[i] = sum;
        } else if (node.val == num){
            node.dup++;
            ans[i] = sum + node.sum;
        } else if (node.val > num){
            node.sum++;
            node.left = buildTree(num,node.left,ans,i,sum);
        } else {
            node.right = buildTree(num,node.right,ans,i,sum+node.dup+node.sum);
        }
        return node;
    }
}