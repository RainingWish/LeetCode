class LRUCache {
    
    //a int capacity bit memory
    //auto save the most used value and remove the unused one
    
    //HashMap + doubly-linked list
    
    //create linked list
    private class Node{
        int key, value;
        Node prev, next;
        Node(int k, int v){
            this.key = k;
            this.value = v;
        }
        Node(){
            this(0, 0);
        }
    }
    
    //initial indexs
    private int cap, count;
    private Map<Integer, Node> map;
    private Node head, tail;

    public LRUCache(int capacity) {
        //give index value
        this.cap = capacity;
        this.count = 0;
        //create hashmap + doubly-linked list
        map = new HashMap<>();
        head = new Node();
        tail = new Node();
        head.next = tail;
        tail.prev = head;
        
    }
    
    public int get(int key) {
        Node n = map.get(key);
        //check exist
        if(null==n){
            return -1;
        }
        //if exist
        update(n);
        return n.value;
    }
    
    //remove the old one and add to most recent place
    private void update(Node node){
        remove(node);
        add(node);
    }
    
    private void add(Node node){
        Node after = head.next;
        head.next = node;
        node.prev = head;
        node.next = after;
        after.prev = node;
    }
    
    private void remove(Node node){
        Node before = node.prev, after = node.next;
        before.next = after;
        after.prev = before;
    }
    
    public void put(int key, int value) {
        Node n = map.get(key);
        //if not exist
        //add it
        if(null==n){
            n = new Node(key, value);
            map.put(key, n);
            add(n);
            count++;
        }
        //if already exist update it to most recent
        else{
            n.value = value;
            update(n);
        }
        //check total length
        //if nessasery remove the tail
        if(count>cap){
            Node toDel = tail.prev;
            remove(toDel);
            map.remove(toDel.key);
            count--;
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */