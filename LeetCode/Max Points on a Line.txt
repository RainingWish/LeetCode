class Solution {
    //(y2-y1)*(x-x2) = (y-y2)*(x2-x1) check if it on the line
    private boolean check (int x1, int y1, int x2, int y2, int x, int y){
        //check y = y2 and x = x2
        if(y == y2 && x == x2) return true;
        //Reduction of a fraction
        int s1 = reduction (y2 - y1, x2 -x1);
        int s2 = reduction (y - y2, x -x2);
        return ((y2 - y1)/s1 == (y-y2)/s2) && ((x2 - x1)/s1 == (x - x2)/s2);
    }
        
    //reduction
    private int reduction (int x, int y){
        while (y != 0){
            int index = x % y;
            x = y;
            y = index;
        }
        return x;
    }
    
    public int maxPoints(int[][] points) {
        //check only there are one/two points
        if(points.length <= 2) return points.length;
        
        //check all point in one line or not
        int i = 0;
        for (; i < points.length - 1; i++) {
            if (points[i][0] != points[i + 1][0] || points[i][1] != points[i + 1][1]) {
                break;
            }
        }
        if(i == points.length -1) return points.length;
        
        //start to compare
        int max = 0;
        //check all possabile line length
        for (i = 0; i < points.length; i++){
            //connect current point with next point
            for (int j = i+1; j< points.length; j++){
                //check duplicate
                if (points[i][0] == points[j][0] && points[i][1] == points[j][1]) continue;
                int temp = 0;
                //check other points on current line or not
                for (int k = 0; k < points.length; k++) {
                if (k != i && k != j) {
                    if (check(points[i][0], points[i][1], points[j][0], points[j][1], points[k][0], points[k][1])) temp++;
                    }
                }
                //check max
                if(temp > max) max = temp;
            }
        }
        //return max + two ortginal points 
        return max + 2;
    }
    
        
}