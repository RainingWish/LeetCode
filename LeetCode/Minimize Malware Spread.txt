class Solution {
     private int spread(int [][] graph, Set<Integer> skip){
        Set<Integer> bad = new HashSet<>(skip);
        Queue<Integer> bfs= new LinkedList<>();
        for(Integer initialInfected:skip){
            bfs.add(initialInfected);
        }
        while(!bfs.isEmpty()){
            Integer next = bfs.remove();
            for(int j=0; j<graph[next].length;++j){
                if(graph[next][j]==1&& !bad.contains(j)){
                    bad.add(j);
                    bfs.add(j);
                }
            }
        }
        //return how many total were skip after spreading
        return bad.size();
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Set<Integer> skip = new HashSet<>();
        for(int i: initial){
            skip.add(i);
        }
        int min = Integer.MAX_VALUE;
        int ans = 0;
        for(int i = 0; i<initial.length; i++){
            int curr = initial[i];
            skip.remove(curr);
            int amount = spread(graph,skip);
            if(amount<min ||(amount==min&& initial[i]<ans)){
                ans=initial[i];
                min=amount;
            }
            skip.add(curr);
        }
        return ans;
    }
}