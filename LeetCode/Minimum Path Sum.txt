class Solution {
    public int minPathSum(int[][] grid) {
        //get max grid size
        int col = grid.length;
        int row = grid[0].length;
        
        //dp array
        int[][] dp = new int[col][row];
        dp[0][0] = grid[0][0];
        
        //initail first col and row
        for(int i = 1; i < col; i++){
            //add the one before it
            dp[i][0]=grid[i][0]+dp[i-1][0];
        }
        for(int i = 1; i < row; i++){
            //add the one before it
            dp[0][i]=grid[0][i]+dp[0][i-1];
        }
        
        //starting from (1,1) get min path
        for(int i = 1; i < col; i++){
            for(int j = 1; j < row; j++){
                //dp current = grid current + min(top value, left value)
                dp[i][j]=grid[i][j]+Math.min(dp[i-1][j],dp[i][j-1]);
            }
        }
        
        //return the most right bottom value
        return dp[col-1][row-1];
    }
}