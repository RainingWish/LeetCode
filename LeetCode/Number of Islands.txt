class Solution {
    private void dfs(char[][] grid, int i, int j, int row, int col){
        //if current row and col out of range or current is 0 return
        if(i<0||j<0||i>=row||j>=col||grid[i][j]=='0') return;
        //else change current to 0
        grid[i][j] = '0';
        //recuirsive with current left, current right, current top, current bottom
        dfs(grid,i+1,j,grid.length,grid[0].length);
        dfs(grid,i-1,j,grid.length,grid[0].length);
        dfs(grid,i,j+1,grid.length,grid[0].length);
        dfs(grid,i,j-1,grid.length,grid[0].length);
    }
    
    public int numIslands(char[][] grid) {
        //null check
        if(grid.length == 0) return 0;
        
        //inital ans value
        int ans = 0;
        
        //loop 2D array
        for(int i=0; i< grid.length;i++){
            for(int j=0; j< grid[0].length;j++){
                //check is island or not
                if(grid[i][j]=='1'){
                    //island+1
                    ans+=1;
                    //passing in dfs change all nearby 1 to 0
                    dfs(grid,i,j,grid.length,grid[0].length);
                }
            }
        }
        //return final answer
        return ans;
    }
}