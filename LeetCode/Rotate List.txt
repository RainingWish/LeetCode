/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || k == 0) return head;
        int len = 0;
        ListNode h = head;
        ListNode tail = null;
        //find the length of head and save the pointer on the tail
        while (h != null) {
            h = h.next;
            len++;
            if (h != null) {
                tail = h;
            }
        }
        //find need to move how many points
        int n = k % len;
        if (n == 0) return head;
        
        //use slow and fast finf n+1 point
        ListNode fast = head;
        while (n >= 0) {
            fast = fast.next;
            n--;
        }
        ListNode slow = head;
        while (fast != null) {
            slow = slow.next;
            fast = fast.next;
        }
        //tail point to head
        tail.next = head;
        //head point to n+1(slow)
        head = slow.next;
        //new tail point to nill
        slow.next = null;
        return head;
    }
}