class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        HashSet<String> set = new HashSet<>();
        for(int  i = 0; i < wordDict.size(); i++){
            set.add(wordDict.get(i));
        }
        return helper(s,set,new HashMap<String, List<String>>());
    }
    
    private List<String> helper(String s, HashSet<String> set, HashMap<String, List<String>> map) {
        if(s.length() == 0 ){
            return new ArrayList<>();
        }
        
        if(map.containsKey(s)){
            return map.get(s);
        }
        
        List<String> ans = new ArrayList<>();
        
        for(int i = 0; i< s.length(); i++){
            if (set.contains(s.substring(i, s.length()))) {
            if (i == 0) {
                ans.add(s.substring(i, s.length()));
            } else {
                List<String> temp = helper(s.substring(0, i), set, map);
                for (int k = 0; k < temp.size(); k++) {
                    String t = temp.get(k);
                    ans.add(t + " " + s.substring(i, s.length()));
                    }
                }
            }
        }
        map.put(s,ans);
        return ans;
    }
}