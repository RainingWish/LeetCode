class Solution {
    public boolean exist(char[][] board, String word) {
        //recursion
        //change string to char
        char[] w = word.toCharArray();
        //check current char exist or not in board
        for (int y=0; y<board.length; y++) {
    	    for (int x=0; x<board[y].length; x++) {
    		    if (exist(board, y, x, w, 0)) return true;
    	    }
        }
        return false;
    }
    
    private boolean exist(char[][] board, int y, int x, char[] word, int i) {
	    //check match
        if (i == word.length) return true;
        //board out of range not exist
	    if (y<0 || x<0 || y == board.length || x == board[y].length) return false;
        //no matching char
	    if (board[y][x] != word[i]) return false;
        //apply bit mask for save memory
	    board[y][x] ^= 256;
        //recursion check top, left, right, bot
	    boolean exist = exist(board, y, x+1, word, i+1)
		    || exist(board, y, x-1, word, i+1)
		    || exist(board, y+1, x, word, i+1)
		    || exist(board, y-1, x, word, i+1);
	    board[y][x] ^= 256;
	    return exist;
    }
    
}