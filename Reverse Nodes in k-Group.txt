/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    //reverse current listnode logic
    private ListNode reverse(ListNode head){
        ListNode curr = null;
        while(head != null){
            //save next nodes
            ListNode next = head.next;
            //point current next to curr
            head.next = curr;
            //let curr point to current node
            curr = head;
            //head comes to head next
            head = next;
        }
        return curr;
    }
    
    public ListNode reverseKGroup(ListNode head, int k) {
        //1.check kth not null
        //2.reverse current group
        //3.loop until head.next = null
        //O(2n) time O(1) space
        
        //null check
        if (head == null) return null;
        //create 4 listnode: sub head, dummy, tail, toNull
        ListNode sub_head = head;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode tail = dummy;
        ListNode toNull = head;
        //loop unteil head.next == null
        while(sub_head != null){
            //find sub nodes tail
            for(int i = k; i>1; i--){
                toNull = toNull.next;
                if(toNull == null) return dummy.next;
            }
            //save following listnode in temp
            ListNode temp = toNull.next;
            //seperate current listnode and temp
            toNull.next = null;
            //reverse current listNode
            ListNode newHead = reverse(sub_head);
            //cunnect newHead to tail
            tail.next = newHead;
            //update tail
            tail = sub_head;
            sub_head = temp;
            toNull = sub_head;
            //connect tail to temp
            tail.next = sub_head;
        }
        //dummy is the empty most beginging node, dummy.next will be the final reversed list node
        return dummy.next;
    }
}